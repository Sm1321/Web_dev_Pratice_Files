types of selectors
----------------------
1.class selector(.)
2.id selector(#)
3.tag name selector(h1,p)
4.universal selector(*)

Use of Selectors:
-------------------------
1. Class Selector (.): Styles multiple elements with the same class name.
2. ID Selector (#): Targets and styles a unique element with a specific ID.
3. Tag Name Selector (h1, p): Applies styles to all elements of a specific tag.
4. Universal Selector (*): Targets and styles all elements on the page

#############################################################################
Types of Tags
--------------
1.Semantic Tags
  => Header
  => nav
  => section
  => article
  => aside
  => footer
Use of Tags:
----------------
Semantic Tags: 
  => Provide meaningful structure to the content for better accessibility and SEO.

Header:
- Defines the header section.
- headings(h1-h6)
Nav:
- Represents navigation links.
- home,services,contact us..
Section:
- Defines sections in a document.
- ex:- introduction ,chapters information
Article:
- Represents independent content.
- ex:-bolgs information,articsl information..
Aside:
- Contains content aside from the main content.
- aside elemnt represents a portion of a document,
 whose content is only indirectly relared to the documet's main content

Footer:
- Defines the footer section.
- 


------------------------------------------------------------------------------------------
2.Non-semantic Tags
  => div
  => span

use of Non-semantic Tags:
--------------------------
Used for generic container elements without meaning.
Div: 
-> Used as a generic container for other elements.
Span:
-> Used to apply styles or scripts to small parts of text.

----------------------------------------------------------------------------------
3.Self-closing Tags
  => All input Tags
  => br
  => img


Use of Self-closing Tags:
----------------------------
-> Tags that do not need a closing tag.
Input: Collects user input.
Br: Inserts a line break.
Img: Embeds images.

-----------------------------------------------------------------------------------------------
4.open and close Tags
  => h1 - h6
  => p
Open and Close Tags: Tags that enclose content and need both opening and closing tags.
h1 - h6: Represent different levels of headings.
p: Represents a paragraph of text.


-----------------------------------------------------------------------------------------

<element> or <tag>
<open tag>
content
</closed tag>




CSS Flexbox
_____________________________________________________________________________

Flex Box:
-------------------------------------------------------------------------
 Flex box:
 ---------
     Flexbox is one-dimesion layout method for arrnaging items in rows or columns

Flex-Properties :
-----------------------------------------------
Flex
flex-direction :
               => row
               =>column
               =>row-reverse
               =>column-reverse
justify-content :
               =>flex-start
               =>center
               =>space-between
               =>space-around
               =>space-evenly

order : 1,2,3,......
flex-grow : 1,2,3,4....
{
The flex-grow property specifies how much the item will,
grow relative to the rest of the flexible items inside the same container.
}
flex-shrink : 1,2,....... (oppoitse of flex-grow is flex-shrink)     



CSS Layout - The Position property
_____________________________________________________________________________
1.static 
2.relative [relative to normal position]
3.fixed [relative to the viewpoint ,always stays in the same place even ifthe page scorlled]
4.absolute [relative to the nearest positioned ancestor]
5.sticky [based on users scroll position ,a sticky toggles between relative and fixed]




CSS :
------------------------------------------------------
1. Comments in Css 
    => /* This is a single-line comment */
2. float
    =>1. left
    =>2. right

3. display
    =>1. flex
    =>2. block
    =>3. inline
    =>4 .none

4. visibility
    =>1. hidden

5. CSS defines three types of gradients:
 =>  1.Linear Gradients (goes down/up/left/right/diagonally)
 =>  2.Radial Gradients (defined by their center)
 =>  3. conical gradients [not available for the HTML5 version]

6. Shadow effects
    =>1. Text shadow effect!  text-shadow : right bottom left top color 
    =>2. box-shadow

7. vertical line
    border:none
    border : 2px 0px 0px 0px red;
    height: 200px



 CSS
---------------------------------------------------
1. transition
2. transition-delay
3. transition-timing-function
        => transition-timing-function: linear
        => transition-timing-function: ease
        => transition-timing-function: ease-in
        => transition-timing-function: ease-out
        => transition-timing-function: ease-in-out
ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
linear - specifies a transition effect with the same speed from start to end
ease-in - specifies a transition effect with a slow start
ease-out - specifies a transition effect with a slow end
ease-in-out - specifies a transition effect with a slow start and end

4. transform




Class topics 
---------------------------

1. Animations 
    => animation properties 
    ________________________________

        =>1. animation-name: example;
        =>2. animation-duration: 4s;
        =>3. animation-delay: 2s;
        =>4. animation-iteration-count: 3 or infinite;
        =>5. animation-direction: reverse; 
        animation-direction property values :
        ______________________________________
            1.  normal - The animation is played as normal (forwards). This is default
            2.  reverse - The animation is played in reverse direction (backwards)
            3. alternate - The animation is played forwards first, then backwards
            4. alternate-reverse - The animation is played backwards first, then forwards
        =>6. animation-timing-function: linear, ease,ease-in,ease-out,ease-in-out

    ---->Sytax for using the animations =>1.  @keyframes example {
                    from {background-color: red;}
                    to {background-color: yellow;}
                }
            =>2.  @keyframes example {
                    0% {background-color: red;}
                    20% {background-color: yellow;}
                    40% {background-color : blue}
                }



Sass [Syntactically awesome style sheet] in css 
-------------------------------------------------
Instruction to use Scss file
    =>1. install Live sass compailer for adding sass or scss
    =>2. create the file with scss extension
    =>3. Add the file link as 'fileName.css' extension
    =>4. click on watch scss option in the bottom of vs code
variable [$property-name:value]
nested [{{}}]
mixin [@mixin ,@include]
_________________________________________________________________________________________________________________________________________



